{"ast":null,"code":"const TABBABLE_NODES = /input|select|textarea|button|object/;\nconst FOCUS_SELECTOR = \"a, input, select, textarea, button, object, [tabindex]\";\nfunction hidden(element) {\n  if (process.env.NODE_ENV === \"test\") {\n    return false;\n  }\n  return element.style.display === \"none\";\n}\nfunction visible(element) {\n  const isHidden = element.getAttribute(\"aria-hidden\") || element.getAttribute(\"hidden\") || element.getAttribute(\"type\") === \"hidden\";\n  if (isHidden) {\n    return false;\n  }\n  let parentElement = element;\n  while (parentElement) {\n    if (parentElement === document.body || parentElement.nodeType === 11) {\n      break;\n    }\n    if (hidden(parentElement)) {\n      return false;\n    }\n    parentElement = parentElement.parentNode;\n  }\n  return true;\n}\nfunction getElementTabIndex(element) {\n  let tabIndex = element.getAttribute(\"tabindex\");\n  if (tabIndex === null) {\n    tabIndex = void 0;\n  }\n  return parseInt(tabIndex, 10);\n}\nfunction focusable(element) {\n  const nodeName = element.nodeName.toLowerCase();\n  const isTabIndexNotNaN = !Number.isNaN(getElementTabIndex(element));\n  const res = TABBABLE_NODES.test(nodeName) && !element.disabled || (element instanceof HTMLAnchorElement ? element.href || isTabIndexNotNaN : isTabIndexNotNaN);\n  return res && visible(element);\n}\nfunction tabbable(element) {\n  const tabIndex = getElementTabIndex(element);\n  const isTabIndexNaN = Number.isNaN(tabIndex);\n  return (isTabIndexNaN || tabIndex >= 0) && focusable(element);\n}\nfunction findTabbableDescendants(element) {\n  return Array.from(element.querySelectorAll(FOCUS_SELECTOR)).filter(tabbable);\n}\nexport { FOCUS_SELECTOR, findTabbableDescendants, focusable, tabbable };","map":{"version":3,"names":["TABBABLE_NODES","FOCUS_SELECTOR","hidden","element","process","env","NODE_ENV","style","display","visible","isHidden","getAttribute","parentElement","document","body","nodeType","parentNode","getElementTabIndex","tabIndex","parseInt","focusable","nodeName","toLowerCase","isTabIndexNotNaN","Number","isNaN","res","test","disabled","HTMLAnchorElement","href","tabbable","isTabIndexNaN","findTabbableDescendants","Array","from","querySelectorAll","filter"],"sources":["/Users/ilhamab/Desktop/jee/jee_project/node_modules/@mantine/hooks/src/use-focus-trap/tabbable.ts"],"sourcesContent":["const TABBABLE_NODES = /input|select|textarea|button|object/;\nexport const FOCUS_SELECTOR = 'a, input, select, textarea, button, object, [tabindex]';\n\nfunction hidden(element: HTMLElement) {\n  if (process.env.NODE_ENV === 'test') {\n    return false;\n  }\n\n  return element.style.display === 'none';\n}\n\nfunction visible(element: HTMLElement) {\n  const isHidden =\n    element.getAttribute('aria-hidden') ||\n    element.getAttribute('hidden') ||\n    element.getAttribute('type') === 'hidden';\n\n  if (isHidden) {\n    return false;\n  }\n\n  let parentElement: HTMLElement = element;\n  while (parentElement) {\n    if (parentElement === document.body || parentElement.nodeType === 11) {\n      break;\n    }\n\n    if (hidden(parentElement)) {\n      return false;\n    }\n\n    parentElement = parentElement.parentNode as HTMLElement;\n  }\n\n  return true;\n}\n\nfunction getElementTabIndex(element: HTMLElement) {\n  let tabIndex = element.getAttribute('tabindex');\n  if (tabIndex === null) {\n    tabIndex = undefined;\n  }\n  return parseInt(tabIndex, 10);\n}\n\nexport function focusable(element: HTMLElement) {\n  const nodeName = element.nodeName.toLowerCase();\n  const isTabIndexNotNaN = !Number.isNaN(getElementTabIndex(element));\n  const res =\n    // @ts-ignore\n    (TABBABLE_NODES.test(nodeName) && !element.disabled) ||\n    (element instanceof HTMLAnchorElement ? element.href || isTabIndexNotNaN : isTabIndexNotNaN);\n\n  return res && visible(element);\n}\n\nexport function tabbable(element: HTMLElement) {\n  const tabIndex = getElementTabIndex(element);\n  const isTabIndexNaN = Number.isNaN(tabIndex);\n  return (isTabIndexNaN || tabIndex >= 0) && focusable(element);\n}\n\nexport function findTabbableDescendants(element: HTMLElement): HTMLElement[] {\n  return Array.from(element.querySelectorAll<HTMLElement>(FOCUS_SELECTOR)).filter(tabbable);\n}\n"],"mappings":"AAAA,MAAMA,cAAc,GAAG,qCAAqC;AAChD,MAACC,cAAc,GAAG;AAC9B,SAASC,MAAMA,CAACC,OAAO,EAAE;EACvB,IAAIC,OAAO,CAACC,GAAG,CAACC,QAAQ,KAAK,MAAM,EAAE;IACnC,OAAO,KAAK;EAChB;EACE,OAAOH,OAAO,CAACI,KAAK,CAACC,OAAO,KAAK,MAAM;AACzC;AACA,SAASC,OAAOA,CAACN,OAAO,EAAE;EACxB,MAAMO,QAAQ,GAAGP,OAAO,CAACQ,YAAY,CAAC,aAAa,CAAC,IAAIR,OAAO,CAACQ,YAAY,CAAC,QAAQ,CAAC,IAAIR,OAAO,CAACQ,YAAY,CAAC,MAAM,CAAC,KAAK,QAAQ;EACnI,IAAID,QAAQ,EAAE;IACZ,OAAO,KAAK;EAChB;EACE,IAAIE,aAAa,GAAGT,OAAO;EAC3B,OAAOS,aAAa,EAAE;IACpB,IAAIA,aAAa,KAAKC,QAAQ,CAACC,IAAI,IAAIF,aAAa,CAACG,QAAQ,KAAK,EAAE,EAAE;MACpE;IACN;IACI,IAAIb,MAAM,CAACU,aAAa,CAAC,EAAE;MACzB,OAAO,KAAK;IAClB;IACIA,aAAa,GAAGA,aAAa,CAACI,UAAU;EAC5C;EACE,OAAO,IAAI;AACb;AACA,SAASC,kBAAkBA,CAACd,OAAO,EAAE;EACnC,IAAIe,QAAQ,GAAGf,OAAO,CAACQ,YAAY,CAAC,UAAU,CAAC;EAC/C,IAAIO,QAAQ,KAAK,IAAI,EAAE;IACrBA,QAAQ,GAAG,KAAK,CAAC;EACrB;EACE,OAAOC,QAAQ,CAACD,QAAQ,EAAE,EAAE,CAAC;AAC/B;AACO,SAASE,SAASA,CAACjB,OAAO,EAAE;EACjC,MAAMkB,QAAQ,GAAGlB,OAAO,CAACkB,QAAQ,CAACC,WAAW,EAAE;EAC/C,MAAMC,gBAAgB,GAAG,CAACC,MAAM,CAACC,KAAK,CAACR,kBAAkB,CAACd,OAAO,CAAC,CAAC;EACnE,MAAMuB,GAAG,GAAG1B,cAAc,CAAC2B,IAAI,CAACN,QAAQ,CAAC,IAAI,CAAClB,OAAO,CAACyB,QAAQ,KAAKzB,OAAO,YAAY0B,iBAAiB,GAAG1B,OAAO,CAAC2B,IAAI,IAAIP,gBAAgB,GAAGA,gBAAgB,CAAC;EAC9J,OAAOG,GAAG,IAAIjB,OAAO,CAACN,OAAO,CAAC;AAChC;AACO,SAAS4B,QAAQA,CAAC5B,OAAO,EAAE;EAChC,MAAMe,QAAQ,GAAGD,kBAAkB,CAACd,OAAO,CAAC;EAC5C,MAAM6B,aAAa,GAAGR,MAAM,CAACC,KAAK,CAACP,QAAQ,CAAC;EAC5C,OAAO,CAACc,aAAa,IAAId,QAAQ,IAAI,CAAC,KAAKE,SAAS,CAACjB,OAAO,CAAC;AAC/D;AACO,SAAS8B,uBAAuBA,CAAC9B,OAAO,EAAE;EAC/C,OAAO+B,KAAK,CAACC,IAAI,CAAChC,OAAO,CAACiC,gBAAgB,CAACnC,cAAc,CAAC,CAAC,CAACoC,MAAM,CAACN,QAAQ,CAAC;AAC9E"},"metadata":{},"sourceType":"module","externalDependencies":[]}