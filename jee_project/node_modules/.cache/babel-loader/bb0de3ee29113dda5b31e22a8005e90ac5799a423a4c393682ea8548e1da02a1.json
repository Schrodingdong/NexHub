{"ast":null,"code":"import React, { forwardRef, useState, useRef, useEffect } from 'react';\nimport { clamp, assignRef, useMergedRef, useOs } from '@mantine/hooks';\nimport { rem, useComponentDefaultProps, getSize } from '@mantine/styles';\nimport { getInputMode } from './get-input-mode/get-input-mode.js';\nimport { Chevron } from './Chevron.js';\nimport useStyles, { CONTROL_SIZES } from './NumberInput.styles.js';\nimport { TextInput } from '../TextInput/TextInput.js';\nvar __defProp = Object.defineProperty;\nvar __defProps = Object.defineProperties;\nvar __getOwnPropDescs = Object.getOwnPropertyDescriptors;\nvar __getOwnPropSymbols = Object.getOwnPropertySymbols;\nvar __hasOwnProp = Object.prototype.hasOwnProperty;\nvar __propIsEnum = Object.prototype.propertyIsEnumerable;\nvar __defNormalProp = (obj, key, value) => key in obj ? __defProp(obj, key, {\n  enumerable: true,\n  configurable: true,\n  writable: true,\n  value\n}) : obj[key] = value;\nvar __spreadValues = (a, b) => {\n  for (var prop in b || (b = {})) if (__hasOwnProp.call(b, prop)) __defNormalProp(a, prop, b[prop]);\n  if (__getOwnPropSymbols) for (var prop of __getOwnPropSymbols(b)) {\n    if (__propIsEnum.call(b, prop)) __defNormalProp(a, prop, b[prop]);\n  }\n  return a;\n};\nvar __spreadProps = (a, b) => __defProps(a, __getOwnPropDescs(b));\nvar __objRest = (source, exclude) => {\n  var target = {};\n  for (var prop in source) if (__hasOwnProp.call(source, prop) && exclude.indexOf(prop) < 0) target[prop] = source[prop];\n  if (source != null && __getOwnPropSymbols) for (var prop of __getOwnPropSymbols(source)) {\n    if (exclude.indexOf(prop) < 0 && __propIsEnum.call(source, prop)) target[prop] = source[prop];\n  }\n  return target;\n};\nconst defaultFormatter = value => value || \"\";\nconst defaultParser = num => {\n  if (num === \"-\") {\n    return num;\n  }\n  let tempNum = num;\n  if (tempNum[0] === \".\") {\n    tempNum = `0${num}`;\n  }\n  const parsedNum = parseFloat(tempNum);\n  if (Number.isNaN(parsedNum)) {\n    return \"\";\n  }\n  return num;\n};\nconst CHEVRON_SIZES = {\n  xs: rem(10),\n  sm: rem(14),\n  md: rem(16),\n  lg: rem(18),\n  xl: rem(20)\n};\nconst defaultProps = {\n  step: 1,\n  hideControls: false,\n  size: \"sm\",\n  precision: 0,\n  noClampOnBlur: false,\n  removeTrailingZeros: false,\n  decimalSeparator: \".\",\n  formatter: defaultFormatter,\n  parser: defaultParser,\n  type: \"text\"\n};\nconst NumberInput = forwardRef((props, ref) => {\n  const _a = useComponentDefaultProps(\"NumberInput\", defaultProps, props),\n    {\n      readOnly,\n      disabled,\n      value,\n      onChange,\n      decimalSeparator,\n      thousandsSeparator,\n      min,\n      max,\n      startValue,\n      step,\n      stepHoldInterval,\n      stepHoldDelay,\n      onFocus,\n      onBlur,\n      onKeyDown,\n      onKeyUp,\n      hideControls,\n      radius,\n      variant,\n      precision,\n      removeTrailingZeros,\n      defaultValue,\n      noClampOnBlur,\n      handlersRef,\n      classNames,\n      styles,\n      size,\n      rightSection,\n      rightSectionWidth,\n      formatter,\n      parser,\n      inputMode,\n      unstyled,\n      type\n    } = _a,\n    others = __objRest(_a, [\"readOnly\", \"disabled\", \"value\", \"onChange\", \"decimalSeparator\", \"thousandsSeparator\", \"min\", \"max\", \"startValue\", \"step\", \"stepHoldInterval\", \"stepHoldDelay\", \"onFocus\", \"onBlur\", \"onKeyDown\", \"onKeyUp\", \"hideControls\", \"radius\", \"variant\", \"precision\", \"removeTrailingZeros\", \"defaultValue\", \"noClampOnBlur\", \"handlersRef\", \"classNames\", \"styles\", \"size\", \"rightSection\", \"rightSectionWidth\", \"formatter\", \"parser\", \"inputMode\", \"unstyled\", \"type\"]);\n  const {\n    classes,\n    cx\n  } = useStyles({\n    radius\n  }, {\n    classNames,\n    styles,\n    unstyled,\n    name: \"NumberInput\",\n    variant,\n    size\n  });\n  const parsePrecision = val => {\n    if (val === \"\") return \"\";\n    let result = val.toFixed(precision);\n    if (removeTrailingZeros && precision > 0) {\n      result = result.replace(new RegExp(`[0]{0,${precision}}$`), \"\");\n      if (result.endsWith(\".\")) {\n        result = result.slice(0, -1);\n      }\n    }\n    return result;\n  };\n  const formatNum = val => {\n    let parsedStr = val;\n    if (decimalSeparator) {\n      parsedStr = parsedStr.replace(\".\", decimalSeparator);\n    }\n    return formatter(parsedStr);\n  };\n  const parseNum = val => {\n    let num = val;\n    if (decimalSeparator) {\n      num = num.replaceAll(thousandsSeparator, \"\").replace(decimalSeparator, \".\");\n    }\n    return parser(num);\n  };\n  const formatInternalValue = val => formatNum(parsePrecision(val));\n  const [internalValue, _setInternalValue] = useState(typeof value === \"number\" ? value : typeof defaultValue === \"number\" ? defaultValue : \"\");\n  const [inputValue, setInputValue] = useState(() => formatInternalValue(internalValue));\n  const inputRef = useRef();\n  const [isFocussed, setIsFocussed] = useState(false);\n  const setInternalValue = (val, forceInputValueUpdate) => {\n    if (!isFocussed || forceInputValueUpdate) {\n      const newInputValue = formatInternalValue(val);\n      if (newInputValue !== inputValue) {\n        setInputValue(newInputValue);\n      }\n    }\n    if (val !== internalValue) {\n      _setInternalValue(val);\n    }\n  };\n  const _min = typeof min === \"number\" ? min : -Infinity;\n  const _max = typeof max === \"number\" ? max : Infinity;\n  const incrementRef = useRef();\n  incrementRef.current = () => {\n    var _a2;\n    let newInternalValue;\n    if (internalValue === \"\") {\n      newInternalValue = (_a2 = startValue != null ? startValue : min) != null ? _a2 : 0;\n    } else {\n      newInternalValue = parseFloat(parsePrecision(clamp(internalValue + step, _min, _max)));\n    }\n    setInternalValue(newInternalValue, true);\n    onChange == null ? void 0 : onChange(newInternalValue);\n  };\n  const decrementRef = useRef();\n  decrementRef.current = () => {\n    var _a2;\n    let newInternalValue;\n    if (internalValue === \"\") {\n      newInternalValue = (_a2 = startValue != null ? startValue : min) != null ? _a2 : 0;\n    } else {\n      newInternalValue = parseFloat(parsePrecision(clamp(internalValue - step, _min, _max)));\n    }\n    setInternalValue(newInternalValue, true);\n    onChange == null ? void 0 : onChange(newInternalValue);\n  };\n  assignRef(handlersRef, {\n    increment: incrementRef.current,\n    decrement: decrementRef.current\n  });\n  useEffect(() => {\n    if (isFocussed) {\n      return;\n    }\n    if (value === void 0) {\n      setInternalValue(internalValue, true);\n    } else {\n      setInternalValue(value, true);\n    }\n  }, [value, isFocussed]);\n  const shouldUseStepInterval = stepHoldDelay !== void 0 && stepHoldInterval !== void 0;\n  const onStepTimeoutRef = useRef(null);\n  const stepCountRef = useRef(0);\n  const onStepDone = () => {\n    if (onStepTimeoutRef.current) {\n      window.clearTimeout(onStepTimeoutRef.current);\n    }\n    onStepTimeoutRef.current = null;\n    stepCountRef.current = 0;\n  };\n  const onStepHandleChange = isIncrement => {\n    if (isIncrement) {\n      incrementRef.current();\n    } else {\n      decrementRef.current();\n    }\n    stepCountRef.current += 1;\n  };\n  const onStepLoop = isIncrement => {\n    onStepHandleChange(isIncrement);\n    if (shouldUseStepInterval) {\n      const interval = typeof stepHoldInterval === \"number\" ? stepHoldInterval : stepHoldInterval(stepCountRef.current);\n      onStepTimeoutRef.current = window.setTimeout(() => onStepLoop(isIncrement), interval);\n    }\n  };\n  const onStep = (event, isIncrement) => {\n    event.preventDefault();\n    inputRef.current.focus();\n    onStepHandleChange(isIncrement);\n    if (shouldUseStepInterval) {\n      onStepTimeoutRef.current = window.setTimeout(() => onStepLoop(isIncrement), stepHoldDelay);\n    }\n  };\n  useEffect(() => {\n    onStepDone();\n    return onStepDone;\n  }, []);\n  const controls = /* @__PURE__ */React.createElement(\"div\", {\n    className: classes.rightSection\n  }, /* @__PURE__ */React.createElement(\"button\", {\n    type: \"button\",\n    tabIndex: -1,\n    \"aria-hidden\": true,\n    disabled: internalValue >= max,\n    className: cx(classes.control, classes.controlUp),\n    onPointerDown: event => {\n      onStep(event, true);\n    },\n    onPointerUp: onStepDone,\n    onPointerLeave: onStepDone\n  }, /* @__PURE__ */React.createElement(Chevron, {\n    size: getSize({\n      size,\n      sizes: CHEVRON_SIZES\n    }),\n    direction: \"up\"\n  })), /* @__PURE__ */React.createElement(\"button\", {\n    type: \"button\",\n    tabIndex: -1,\n    \"aria-hidden\": true,\n    disabled: internalValue <= min,\n    className: cx(classes.control, classes.controlDown),\n    onPointerDown: event => {\n      onStep(event, false);\n    },\n    onPointerUp: onStepDone,\n    onPointerLeave: onStepDone\n  }, /* @__PURE__ */React.createElement(Chevron, {\n    size: getSize({\n      size,\n      sizes: CHEVRON_SIZES\n    }),\n    direction: \"down\"\n  })));\n  const processInputValue = newInputValue => {\n    let normalizedInputValue = newInputValue;\n    if (normalizedInputValue[0] === `${decimalSeparator}` || normalizedInputValue[0] === \".\") {\n      normalizedInputValue = `0${normalizedInputValue}`;\n    }\n    const parsedValue = parseFloat(parsePrecision(parseFloat(parseNum(normalizedInputValue))));\n    const clampedValue = !noClampOnBlur ? clamp(parsedValue, _min, _max) : parsedValue;\n    const finalValue = Number.isNaN(clampedValue) ? \"\" : clampedValue;\n    const internalValueChanged = internalValue !== finalValue;\n    setInputValue(newInputValue);\n    setInternalValue(finalValue);\n    if (internalValueChanged) {\n      onChange == null ? void 0 : onChange(finalValue);\n    }\n  };\n  const handleChange = event => {\n    const evt = event.nativeEvent;\n    if (evt.isComposing) {\n      return;\n    }\n    processInputValue(event.target.value);\n  };\n  const handleFocus = event => {\n    setIsFocussed(true);\n    onFocus == null ? void 0 : onFocus(event);\n  };\n  const handleBlur = event => {\n    setIsFocussed(false);\n    onBlur == null ? void 0 : onBlur(event);\n  };\n  const handleKeyDown = event => {\n    typeof onKeyDown === \"function\" && onKeyDown(event);\n    if (event.repeat && shouldUseStepInterval && (event.key === \"ArrowUp\" || event.key === \"ArrowDown\")) {\n      event.preventDefault();\n      return;\n    }\n    if (!readOnly) {\n      if (event.key === \"ArrowUp\") {\n        onStep(event, true);\n      } else if (event.key === \"ArrowDown\") {\n        onStep(event, false);\n      }\n    }\n  };\n  const handleKeyUp = event => {\n    typeof onKeyUp === \"function\" && onKeyUp(event);\n    if (event.key === \"ArrowUp\" || event.key === \"ArrowDown\") {\n      onStepDone();\n    }\n  };\n  return /* @__PURE__ */React.createElement(TextInput, __spreadProps(__spreadValues({}, others), {\n    type,\n    variant,\n    value: inputValue,\n    disabled,\n    readOnly,\n    ref: useMergedRef(inputRef, ref),\n    onChange: handleChange,\n    onFocus: handleFocus,\n    onBlur: handleBlur,\n    onKeyDown: handleKeyDown,\n    onKeyUp: handleKeyUp,\n    rightSection: rightSection || (disabled || readOnly || hideControls || variant === \"unstyled\" ? null : controls),\n    rightSectionWidth: rightSectionWidth != null ? rightSectionWidth : `calc(${getSize({\n      size,\n      sizes: CONTROL_SIZES\n    })} + ${rem(1)})`,\n    radius,\n    max,\n    min,\n    step,\n    size,\n    styles,\n    classNames,\n    inputMode: inputMode || getInputMode(step, precision, useOs()),\n    __staticSelector: \"NumberInput\",\n    unstyled\n  }));\n});\nNumberInput.displayName = \"@mantine/core/NumberInput\";\nexport { NumberInput };","map":{"version":3,"names":["__defProp","Object","defineProperty","__defProps","defineProperties","__getOwnPropDescs","getOwnPropertyDescriptors","__getOwnPropSymbols","getOwnPropertySymbols","__hasOwnProp","prototype","hasOwnProperty","__propIsEnum","propertyIsEnumerable","__defNormalProp","obj","key","value","enumerable","configurable","writable","__spreadValues","a","b","prop","call","__spreadProps","__objRest","source","exclude","target","indexOf","defaultFormatter","defaultParser","num","tempNum","parsedNum","parseFloat","Number","isNaN","CHEVRON_SIZES","xs","rem","sm","md","lg","xl","defaultProps","step","hideControls","size","precision","noClampOnBlur","removeTrailingZeros","decimalSeparator","formatter","parser","type","NumberInput","forwardRef","props","ref","_a","useComponentDefaultProps","readOnly","disabled","onChange","thousandsSeparator","min","max","startValue","stepHoldInterval","stepHoldDelay","onFocus","onBlur","onKeyDown","onKeyUp","radius","variant","defaultValue","handlersRef","classNames","styles","rightSection","rightSectionWidth","inputMode","unstyled","others","classes","cx","useStyles","name","parsePrecision","val","result","toFixed","replace","RegExp","endsWith","slice","formatNum","parsedStr","parseNum","replaceAll","formatInternalValue","internalValue","_setInternalValue","useState","inputValue","setInputValue","inputRef","useRef","isFocussed","setIsFocussed","setInternalValue","forceInputValueUpdate","newInputValue","_min","Infinity","_max","incrementRef","current","_a2","newInternalValue","clamp","decrementRef","assignRef","increment","decrement","useEffect","shouldUseStepInterval","onStepTimeoutRef","stepCountRef","onStepDone","window","clearTimeout","onStepHandleChange","isIncrement","onStepLoop","interval","setTimeout","onStep","event","preventDefault","focus","controls","React","createElement","className","tabIndex","control","controlUp","onPointerDown","onPointerUp","onPointerLeave","Chevron","getSize","sizes","direction","controlDown","processInputValue","normalizedInputValue","parsedValue","clampedValue","finalValue","internalValueChanged","handleChange","evt","nativeEvent","isComposing","handleFocus","handleBlur","handleKeyDown","repeat","handleKeyUp","TextInput","useMergedRef","CONTROL_SIZES","getInputMode","useOs","__staticSelector","displayName"],"sources":["/Users/ilhamab/Desktop/jee/jee_project/node_modules/@mantine/core/src/NumberInput/NumberInput.tsx"],"sourcesContent":["import React, { useState, useEffect, useRef, forwardRef } from 'react';\nimport { useMergedRef, assignRef, useOs, clamp } from '@mantine/hooks';\nimport { DefaultProps, Selectors, useComponentDefaultProps, rem, getSize } from '@mantine/styles';\nimport { TextInput } from '../TextInput';\nimport { InputStylesNames, InputWrapperStylesNames } from '../Input';\nimport { getInputMode } from './get-input-mode/get-input-mode';\nimport { Chevron } from './Chevron';\nimport useStyles, { CONTROL_SIZES } from './NumberInput.styles';\n\nexport type InnerNumberInputStylesNames = Selectors<typeof useStyles>;\nexport type NumberInputStylesNames =\n  | InputStylesNames\n  | InputWrapperStylesNames\n  | InnerNumberInputStylesNames;\n\nexport interface NumberInputHandlers {\n  increment(): void;\n  decrement(): void;\n}\n\ntype Formatter = (value: string | '') => string;\ntype Parser = (value: string | '') => string;\n\nexport interface NumberInputProps\n  extends DefaultProps<NumberInputStylesNames>,\n    Omit<\n      React.ComponentPropsWithoutRef<typeof TextInput>,\n      'onChange' | 'value' | 'classNames' | 'styles' | 'type'\n    > {\n  /** Called when value changes */\n  onChange?(value: number | ''): void;\n\n  /** Input value for controlled component */\n  value?: number | '';\n\n  /** Default value for uncontrolled component */\n  defaultValue?: number | '';\n\n  /** The decimal separator */\n  decimalSeparator?: string;\n\n  /** The thousands separator */\n  thousandsSeparator?: string;\n\n  /** Maximum possible value */\n  max?: number;\n\n  /** Minimal possible value */\n  min?: number;\n\n  /** First value if no initial value was set and increment/decrement is triggered using controls or up/down arrows */\n  startValue?: number;\n\n  /** Number by which value will be incremented/decremented with controls and up/down arrows */\n  step?: number;\n\n  /** Delay before stepping the value. Can be a number of milliseconds or a function that receives the current step count and returns the delay in milliseconds. */\n  stepHoldInterval?: number | ((stepCount: number) => number);\n\n  /** Initial delay in milliseconds before stepping the value. */\n  stepHoldDelay?: number;\n\n  /** Removes increment/decrement controls */\n  hideControls?: boolean;\n\n  /** Amount of digits after the decimal point  */\n  precision?: number;\n\n  /** Only works if a precision is given, removes the trailing zeros, false by default */\n  removeTrailingZeros?: boolean;\n\n  /** Prevent value clamp on blur */\n  noClampOnBlur?: boolean;\n\n  /** Get increment/decrement handlers */\n  handlersRef?: React.ForwardedRef<NumberInputHandlers | undefined>;\n\n  /** Formats the number into the input */\n  formatter?: Formatter;\n\n  /** Parses the value from formatter, should be used with formatter at the same time */\n  parser?: Parser;\n\n  /** Input type, defaults to text */\n  type?: 'text' | 'number';\n}\n\nconst defaultFormatter: Formatter = (value) => value || '';\nconst defaultParser: Parser = (num) => {\n  if (num === '-') {\n    return num;\n  }\n\n  let tempNum = num;\n\n  if (tempNum[0] === '.') {\n    tempNum = `0${num}`;\n  }\n\n  const parsedNum = parseFloat(tempNum);\n\n  if (Number.isNaN(parsedNum)) {\n    return '';\n  }\n\n  return num;\n};\n\nconst CHEVRON_SIZES = {\n  xs: rem(10),\n  sm: rem(14),\n  md: rem(16),\n  lg: rem(18),\n  xl: rem(20),\n};\n\nconst defaultProps: Partial<NumberInputProps> = {\n  step: 1,\n  hideControls: false,\n  size: 'sm',\n  precision: 0,\n  noClampOnBlur: false,\n  removeTrailingZeros: false,\n  decimalSeparator: '.',\n  formatter: defaultFormatter,\n  parser: defaultParser,\n  type: 'text',\n};\n\nexport const NumberInput = forwardRef<HTMLInputElement, NumberInputProps>((props, ref) => {\n  const {\n    readOnly,\n    disabled,\n    value,\n    onChange,\n    decimalSeparator,\n    thousandsSeparator,\n    min,\n    max,\n    startValue,\n    step,\n    stepHoldInterval,\n    stepHoldDelay,\n    onFocus,\n    onBlur,\n    onKeyDown,\n    onKeyUp,\n    hideControls,\n    radius,\n    variant,\n    precision,\n    removeTrailingZeros,\n    defaultValue,\n    noClampOnBlur,\n    handlersRef,\n    classNames,\n    styles,\n    size,\n    rightSection,\n    rightSectionWidth,\n    formatter,\n    parser,\n    inputMode,\n    unstyled,\n    type,\n    ...others\n  } = useComponentDefaultProps('NumberInput', defaultProps, props);\n\n  const { classes, cx } = useStyles(\n    { radius },\n    { classNames, styles, unstyled, name: 'NumberInput', variant, size }\n  );\n\n  const parsePrecision = (val: number | '') => {\n    if (val === '') return '';\n\n    let result = val.toFixed(precision);\n\n    if (removeTrailingZeros && precision > 0) {\n      result = result.replace(new RegExp(`[0]{0,${precision}}$`), '');\n      if (result.endsWith('.')) {\n        result = result.slice(0, -1);\n      }\n    }\n\n    return result;\n  };\n\n  const formatNum = (val: string) => {\n    let parsedStr = val;\n    if (decimalSeparator) {\n      parsedStr = parsedStr.replace('.', decimalSeparator);\n    }\n\n    return formatter(parsedStr);\n  };\n\n  const parseNum = (val: string): string | '' => {\n    let num = val;\n\n    if (decimalSeparator) {\n      num = num.replaceAll(thousandsSeparator, '').replace(decimalSeparator, '.');\n    }\n\n    return parser(num);\n  };\n\n  const formatInternalValue = (val: number | '') => formatNum(parsePrecision(val));\n\n  // Parsed value that will be used for uncontrolled state and for setting the inputValue\n  const [internalValue, _setInternalValue] = useState<number | ''>(\n    typeof value === 'number' ? value : typeof defaultValue === 'number' ? defaultValue : ''\n  );\n\n  // Value of input field. Gets changed through user input and on internalValue change\n  const [inputValue, setInputValue] = useState(() => formatInternalValue(internalValue));\n\n  const inputRef = useRef<HTMLInputElement>();\n\n  const [isFocussed, setIsFocussed] = useState(false);\n\n  const setInternalValue = (val: number | '', forceInputValueUpdate?: boolean) => {\n    if (!isFocussed || forceInputValueUpdate) {\n      const newInputValue = formatInternalValue(val);\n      if (newInputValue !== inputValue) {\n        // Make sure to update/reset the input value even if the internal value stays the same\n        // E. g. this may happen if the internalValue is \"10\" and the user entered \"10abc\"\n        setInputValue(newInputValue);\n      }\n    }\n\n    if (val !== internalValue) {\n      _setInternalValue(val);\n    }\n  };\n\n  const _min = typeof min === 'number' ? min : -Infinity;\n  const _max = typeof max === 'number' ? max : Infinity;\n\n  const incrementRef = useRef<() => void>();\n  incrementRef.current = () => {\n    let newInternalValue: number;\n    if (internalValue === '') {\n      newInternalValue = startValue ?? min ?? 0;\n    } else {\n      newInternalValue = parseFloat(parsePrecision(clamp(internalValue + step, _min, _max)));\n    }\n\n    setInternalValue(newInternalValue, true);\n    onChange?.(newInternalValue);\n  };\n\n  const decrementRef = useRef<() => void>();\n  decrementRef.current = () => {\n    let newInternalValue: number;\n    if (internalValue === '') {\n      newInternalValue = startValue ?? min ?? 0;\n    } else {\n      newInternalValue = parseFloat(parsePrecision(clamp(internalValue - step, _min, _max)));\n    }\n\n    setInternalValue(newInternalValue, true);\n    onChange?.(newInternalValue);\n  };\n\n  assignRef(handlersRef, { increment: incrementRef.current, decrement: decrementRef.current });\n\n  useEffect(() => {\n    if (isFocussed) {\n      return;\n    }\n\n    if (value === undefined) {\n      // For uncontrolled inputs reapply internalValue\n      setInternalValue(internalValue, true);\n    } else {\n      // For controlled inputs apply value\n      setInternalValue(value, true);\n    }\n  }, [value, isFocussed]);\n\n  const shouldUseStepInterval = stepHoldDelay !== undefined && stepHoldInterval !== undefined;\n  const onStepTimeoutRef = useRef<number>(null);\n  const stepCountRef = useRef<number>(0);\n\n  const onStepDone = () => {\n    if (onStepTimeoutRef.current) {\n      window.clearTimeout(onStepTimeoutRef.current);\n    }\n    onStepTimeoutRef.current = null;\n    stepCountRef.current = 0;\n  };\n\n  const onStepHandleChange = (isIncrement: boolean) => {\n    if (isIncrement) {\n      incrementRef.current();\n    } else {\n      decrementRef.current();\n    }\n    stepCountRef.current += 1;\n  };\n\n  const onStepLoop = (isIncrement: boolean) => {\n    onStepHandleChange(isIncrement);\n\n    if (shouldUseStepInterval) {\n      const interval =\n        typeof stepHoldInterval === 'number'\n          ? stepHoldInterval\n          : stepHoldInterval(stepCountRef.current);\n      onStepTimeoutRef.current = window.setTimeout(() => onStepLoop(isIncrement), interval);\n    }\n  };\n\n  const onStep = (\n    event: React.MouseEvent<HTMLElement> | React.KeyboardEvent<HTMLElement>,\n    isIncrement: boolean\n  ) => {\n    event.preventDefault();\n    inputRef.current.focus();\n    onStepHandleChange(isIncrement);\n    if (shouldUseStepInterval) {\n      onStepTimeoutRef.current = window.setTimeout(() => onStepLoop(isIncrement), stepHoldDelay);\n    }\n  };\n\n  useEffect(() => {\n    onStepDone();\n    return onStepDone;\n  }, []);\n\n  const controls = (\n    <div className={classes.rightSection}>\n      <button\n        type=\"button\"\n        tabIndex={-1}\n        aria-hidden\n        disabled={internalValue >= max}\n        className={cx(classes.control, classes.controlUp)}\n        onPointerDown={(event) => {\n          onStep(event, true);\n        }}\n        onPointerUp={onStepDone}\n        onPointerLeave={onStepDone}\n      >\n        <Chevron size={getSize({ size, sizes: CHEVRON_SIZES })} direction=\"up\" />\n      </button>\n      <button\n        type=\"button\"\n        tabIndex={-1}\n        aria-hidden\n        disabled={internalValue <= min}\n        className={cx(classes.control, classes.controlDown)}\n        onPointerDown={(event) => {\n          onStep(event, false);\n        }}\n        onPointerUp={onStepDone}\n        onPointerLeave={onStepDone}\n      >\n        <Chevron size={getSize({ size, sizes: CHEVRON_SIZES })} direction=\"down\" />\n      </button>\n    </div>\n  );\n\n  /**\n   * Parse new input value and propagate it via `onChange` to parent.\n   */\n  const processInputValue = (newInputValue: string) => {\n    let normalizedInputValue = newInputValue;\n    if (normalizedInputValue[0] === `${decimalSeparator}` || normalizedInputValue[0] === '.') {\n      normalizedInputValue = `0${normalizedInputValue}`;\n    }\n\n    const parsedValue = parseFloat(parsePrecision(parseFloat(parseNum(normalizedInputValue))));\n    const clampedValue = !noClampOnBlur ? clamp(parsedValue, _min, _max) : parsedValue;\n    const finalValue = Number.isNaN(clampedValue) ? '' : clampedValue;\n\n    const internalValueChanged = internalValue !== finalValue;\n\n    setInputValue(newInputValue);\n    setInternalValue(finalValue);\n\n    if (internalValueChanged) {\n      onChange?.(finalValue);\n    }\n  };\n\n  const handleChange = (event: React.ChangeEvent<HTMLInputElement>) => {\n    const evt = event.nativeEvent as InputEvent;\n    if (evt.isComposing) {\n      return;\n    }\n\n    processInputValue(event.target.value);\n  };\n\n  const handleFocus = (event: React.FocusEvent<HTMLInputElement>) => {\n    setIsFocussed(true);\n    onFocus?.(event);\n  };\n\n  const handleBlur = (event: React.FocusEvent<HTMLInputElement>) => {\n    setIsFocussed(false);\n    onBlur?.(event);\n  };\n\n  const handleKeyDown = (event: React.KeyboardEvent<HTMLInputElement>) => {\n    typeof onKeyDown === 'function' && onKeyDown(event);\n    if (\n      event.repeat &&\n      shouldUseStepInterval &&\n      (event.key === 'ArrowUp' || event.key === 'ArrowDown')\n    ) {\n      event.preventDefault();\n      return;\n    }\n\n    if (!readOnly) {\n      if (event.key === 'ArrowUp') {\n        onStep(event, true);\n      } else if (event.key === 'ArrowDown') {\n        onStep(event, false);\n      }\n    }\n  };\n\n  const handleKeyUp = (event: React.KeyboardEvent<HTMLInputElement>) => {\n    typeof onKeyUp === 'function' && onKeyUp(event);\n    if (event.key === 'ArrowUp' || event.key === 'ArrowDown') {\n      onStepDone();\n    }\n  };\n\n  return (\n    <TextInput\n      {...others}\n      type={type}\n      variant={variant}\n      value={inputValue}\n      disabled={disabled}\n      readOnly={readOnly}\n      ref={useMergedRef(inputRef, ref)}\n      onChange={handleChange}\n      onFocus={handleFocus}\n      onBlur={handleBlur}\n      onKeyDown={handleKeyDown}\n      onKeyUp={handleKeyUp}\n      rightSection={\n        rightSection ||\n        (disabled || readOnly || hideControls || variant === 'unstyled' ? null : controls)\n      }\n      rightSectionWidth={\n        rightSectionWidth ?? `calc(${getSize({ size, sizes: CONTROL_SIZES })} + ${rem(1)})`\n      }\n      radius={radius}\n      max={max}\n      min={min}\n      step={step}\n      size={size}\n      styles={styles}\n      classNames={classNames}\n      inputMode={inputMode || getInputMode(step, precision, useOs())}\n      __staticSelector=\"NumberInput\"\n      unstyled={unstyled}\n    />\n  );\n});\n\nNumberInput.displayName = '@mantine/core/NumberInput';\n"],"mappings":"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"},"metadata":{},"sourceType":"module","externalDependencies":[]}